/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.0-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;


import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-10-11T10:26:38.488-04:00")

@Api(value = "subject", description = "the subject API")
public interface SubjectApi {

    @ApiOperation(value = "adds an item to a subject", notes = "gets an ID and adds it to the subject", response = Void.class, tags={ "subject", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Subject not found") })
    @RequestMapping(value = "/subject/{itemID}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addItemInSubject(@ApiParam(value = "item's identification",required=true ) @PathVariable("itemID") String itemID, @NotNull@ApiParam(value = "subject's ID", required = true) @Valid @RequestParam(value = "subjectID", required = true) String subjectID, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Add a new subject to the portlet", notes = "adds a subject to the list in the portlet", response = Void.class, tags={ "subject", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Something went wrong") })
    @RequestMapping(value = "/subject",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addSubject( @NotNull@ApiParam(value = "Subject/Item object that will be added in the store", required = true) @Valid @RequestParam(value = "subjectURL", required = true) String subjectURL, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "deletes an item in a subject", notes = "delete an item using its identification", response = Void.class, tags={ "subject", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Subject not found") })
    @RequestMapping(value = "/subject/{itemID}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteItemInSubject(@ApiParam(value = "item's identification",required=true ) @PathVariable("itemID") String itemID, @NotNull@ApiParam(value = "subject's ID", required = true) @Valid @RequestParam(value = "subjectID", required = true) String subjectID, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Deletes a subject", notes = "", response = Void.class, tags={ "subject", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Subject not found") })
    @RequestMapping(value = "/subject",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteSubject( @NotNull@ApiParam(value = "Subject id to delete", required = true) @Valid @RequestParam(value = "subjectID", required = true) String subjectID, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
